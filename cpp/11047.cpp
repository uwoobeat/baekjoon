#include <bits/stdc++.h>
#define FASTIO ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
using namespace std;

int main()
{
    FASTIO
    int n, k, arr[11], ans = 0; cin >> n >> k;
    for (int i=0; i<n; i++) cin >> arr[i];

    for (int i=n-1; i>=0; i--) {
        ans += k/arr[i];
        k %= arr[i];
    }

    cout << ans;
    return 0;
}

/*
그리디 알고리즘 (탐욕법)
- 선택의 순간마다 당장 눈앞의 최적 상황을 선택하여 결론을 내는 방법
- 전체 문제를 작은 부분 문제로 쪼갠다
- 부분의 최적해를 찾고, 부분 최적해가 정당한지 증명하고, 구현한다

매 순간 최적의 선택을 하기 때문에 
10 -> 100과 50 -> 20같은 상황을 비교하는 문제에는 적용 불가
즉 부분 최적해가 전체 최적해의 일부인지 증명하는 과정 필요

dp - 메모이제이션을 통해 모든 경우를 기록함, 느림 but 전체 최적 선택 보장
greedy - 부분 최적해를 통해 탐색 경우를 줄임, 빠름 but 부분최적해 증명 필요
하지만 전체 문제를 부분 문제로 쪼갠다는 점에서는 동일
*/

/*
전체 문제 - 동전 최소한으로 사용해서 k원 만들기
부분의 최적해 - 가치가 높은 동전부터 사용해서 채우기
정당성 증명 (귀류법) - 
    가치 높은 동전 제외하기 (x, 반 : 500 * 2보다 1000 * 1이 최적), 
    가치 높은 동전부터 하되 적당히 (x, 반 : 500*1+100*5보다 500*2가 최적)
*/